provider "aws" {
  region = "us-west-2"
}

# Cria uma VPC
resource "aws_vpc" "example" {
  cidr_block = "10.0.0.0/16"
}

# Cria a subnet na VPC
resource "aws_subnet" "example" {
  cidr_block = "10.0.0.0/24"
  vpc_id     = aws_vpc.example.id
}

# Cria as três máquinas
resource "aws_instance" "example" {
  count = 3

  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.example.id

  tags = {
    Name = "example-${count.index + 1}"
  }

  connection {
    type     = "ssh"
    user     = "ubuntu"
    private_key = file("~/.ssh/id_rsa")
  }

  # Instala o Kubernetes e Helm
  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install -y apt-transport-https",
      "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -",
      "echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' | sudo tee /etc/apt/sources.list.d/kubernetes.list",
      "sudo apt-get update",
      "sudo apt-get install -y kubeadm kubelet kubectl",
      "sudo apt-get install -y helm"
    ]
  }

  # Deixa um node como Master e os outros como Workers
  provisioner "remote-exec" {
    when = count.index == 0
    inline = [
      "sudo kubeadm init",
      "mkdir -p $HOME/.kube",
      "sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config",
      "sudo chown $(id -u):$(id -g) $HOME/.kube/config"
    ]
  }

  provisioner "remote-exec" {
    when = count.index != 0
    inline = [
      "sudo kubeadm join --token <token> <master-ip>:<master-port> --discovery-token-ca-cert-hash sha256:<hash>"
    ]
  }
}

# Cria o Workload/Deployment com o NGinX
resource "kubernetes_manifest" "nginx_deployment" {
  api_version = "apps/v1"
  kind        = "Deployment"
  metadata {
    name = "nginx-deployment"
  }
  spec {
    replicas = 5

    selector {
      match_labels = {
        app = "nginx"
      }
